{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","data","setData","country","search","results","inputs","setInputs","countries","setCountries","setError","handleChange","e","target","name","value","setReviewsToLocalStorage","reviews","i","length","stringify","JSON","localStorage","setItem","setReviewsFromLocalStorage","reviewsFromStorage","getItem","parsedReview","parse","useEffect","a","fetch","method","response","json","Set","map","x","className","Grid","container","item","xs","style","height","border","TextField","select","onChange","variant","fullWidth","Object","values","console","log","MenuItem","key","type","Button","float","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c651cf58.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Grid,\n  TextField,\n  MenuItem,\n  Button,\n  TableContainer,\n  Table,\n  TableRow,\n  TableCell,\n  TableHead,\n  TableBody,\n  Link,\n} from \"@material-ui/core\";\nimport { func } from \"prop-types\";\n\nfunction App() {\n  const [data, setData] = React.useState(null);\n  const [inputs, setInputs] = useState({\n    country: \"\",\n    search: \"\",\n    results: 10,\n  });\n  const [countries, setCountries] = React.useState([]);\n  const [error, setError] = React.useState(\"\");\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setInputs((inputs) => ({ ...inputs, [name]: value }));\n  }\n\n  function setReviewsToLocalStorage(reviews) {\n    for (let i = 0; i < reviews.length; i++) {\n      setData([...data, reviews[i]]);\n      const stringify = JSON.stringify(reviews[i]);\n      localStorage.setItem(`reviews${i}`, stringify);\n    }\n  }\n\n  function setReviewsFromLocalStorage() {\n    let i = 0;\n    let reviewsFromStorage = localStorage.getItem(`reviews${i}`);\n    while (reviewsFromStorage !== null) {\n      const parsedReview = JSON.parse(reviewsFromStorage);\n      setData([data, parsedReview]);\n    }\n  }\n\n  React.useEffect(() => {\n    if (data === null) {\n      if (localStorage.getItem(\"reviews0\") === null) {\n        (async () => {\n          try {\n            const response = await fetch(\n              \"https://lightninglaw.azurewebsites.net/api/reviews\",\n              {\n                method: \"GET\",\n              }\n            );\n            const data = await response.json();\n            setData(data);\n            setCountries([...new Set(data.map((x) => x.country))]);\n            setReviewsToLocalStorage(data);\n          } catch {\n            setError(\n              \"We're sorry. Something went wrong on our end. Please try again later.\"\n            );\n          }\n        })();\n      } else {\n        (async () => {\n          setReviewsFromLocalStorage();\n        })();\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Grid container>\n        <Grid item xs={6}>\n          <h1>TOTAL NUMBER OF REVIEWS</h1>\n          <Grid style={{ height: \"500px\", border: \"2px solid black\" }}>\n            <h1>number</h1>\n          </Grid>\n        </Grid>\n        <Grid item xs={6}>\n          <h1>Countires of Origin</h1>\n          {countries ? (\n            <TextField\n              select\n              name=\"countries\"\n              value={inputs.country}\n              onChange={handleChange}\n              variant=\"outlined\"\n              fullWidth\n            >\n              {Object.values(countries).map((x) => {\n                console.log(x);\n                return (\n                  <MenuItem key={1} value={x}>\n                    {x}\n                  </MenuItem>\n                );\n              })}\n            </TextField>\n          ) : (\n            <TextField\n              select\n              name=\"countries\"\n              value={inputs.country}\n              onChange={handleChange}\n              variant=\"outlined\"\n              fullWidth\n            >\n              <MenuItem key={1} value=\"\">\n                {\"\"}\n              </MenuItem>\n            </TextField>\n          )}\n        </Grid>\n        <Grid container>\n          <Grid item xs={6}>\n            Filters:{\" \"}\n            <TextField\n              type=\"text\"\n              name=\"search\"\n              value={inputs.search}\n              onChange={handleChange}\n              variant=\"outlined\"\n            ></TextField>\n          </Grid>\n          <Grid item xs={6}>\n            <Grid container>\n              <Grid item xs={4}>\n                {\" \"}\n                <Button>SEARCH</Button>\n              </Grid>\n              <Grid item xs={8}>\n                {\" \"}\n                <TextField\n                  style={{ float: \"right\" }}\n                  select\n                  name=\"results\"\n                  value={inputs.results}\n                  onChange={handleChange}\n                  variant=\"outlined\"\n                  fullWidth\n                >\n                  <MenuItem key={10} value={10}>\n                    10\n                  </MenuItem>\n                  <MenuItem key={20} value={20}>\n                    20\n                  </MenuItem>\n                  <MenuItem key={30} value={30}>\n                    30\n                  </MenuItem>\n                </TextField>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell>Variety</TableCell>\n                  <TableCell>Winery</TableCell>\n                  <TableCell>Points</TableCell>\n                  <TableCell>Price</TableCell>\n                  <TableCell>Description</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {/* {data &&\n                  data.map((x, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell>{x.title}</TableCell>\n                        <TableCell>{x.variety}</TableCell>\n                        <TableCell>{x.winery}</TableCell>\n                        <TableCell>{x.points}</TableCell>\n                        <TableCell>{x.price}</TableCell>\n                        <TableCell>\n                          <Link> {x.description}</Link>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })} */}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}